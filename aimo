{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73231,"databundleVersionId":8365361,"sourceType":"competition"},{"sourceId":7369493,"sourceType":"datasetVersion","datasetId":4281572},{"sourceId":8012825,"sourceType":"datasetVersion","datasetId":4720595},{"sourceId":8023365,"sourceType":"datasetVersion","datasetId":4728129},{"sourceId":5112,"sourceType":"modelInstanceVersion","modelInstanceId":3900},{"sourceId":5994,"sourceType":"modelInstanceVersion","modelInstanceId":4761},{"sourceId":11382,"sourceType":"modelInstanceVersion","modelInstanceId":8318},{"sourceId":11394,"sourceType":"modelInstanceVersion","modelInstanceId":8332}],"dockerImageVersionId":30674,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":724.728315,"end_time":"2024-02-29T09:37:08.760349","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-02-29T09:25:04.032034","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"21267b653022419eb6fc3f47aa4db8ed":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_926e7ccdad6440be85c76931860b744c","placeholder":"​","style":"IPY_MODEL_feef8334edb24f6da22e8bb1d8d80c67","value":"Loading checkpoint shards: 100%"}},"2144e851698b4707ad1c7fc29fe21b03":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3963993becfa487c9ff725f211915e67":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7a725e1b0cc4ad78a62beab5f663065","placeholder":"​","style":"IPY_MODEL_fdb32baaed7145d8a8024b615ef242ca","value":" 19/19 [10:48&lt;00:00, 33.24s/it]"}},"5882b6e860be4a0db012a64fc0704a3f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_21267b653022419eb6fc3f47aa4db8ed","IPY_MODEL_d91eb83d016a4381828192a98f798f9b","IPY_MODEL_3963993becfa487c9ff725f211915e67"],"layout":"IPY_MODEL_6a892a5561f742bb9db9f13859c18e90"}},"6a892a5561f742bb9db9f13859c18e90":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"926e7ccdad6440be85c76931860b744c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d91eb83d016a4381828192a98f798f9b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2144e851698b4707ad1c7fc29fe21b03","max":19,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e0693b32889c42b18b9a3844e045d048","value":19}},"e0693b32889c42b18b9a3844e045d048":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f7a725e1b0cc4ad78a62beab5f663065":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fdb32baaed7145d8a8024b615ef242ca":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"feef8334edb24f6da22e8bb1d8d80c67":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}},"version_major":2,"version_minor":0}}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Credits:\n\n- https://www.kaggle.com/code/olyatsimboy/aimo-openmath-mistral-baseline\n- https://www.kaggle.com/code/aatiffraz/prompt-prediction-w-mixtral-mistral7b-gemma-llama\n- https://www.kaggle.com/code/thedrcat/aimo-mixtral-baseline\n- https://www.kaggle.com/code/awsaf49/aimo-kerasnlp-starter\n","metadata":{}},{"cell_type":"code","source":"!pip install -U /kaggle/input/bitsandbytes-0-42-0-py3-none-any-whl/bitsandbytes-0.42.0-py3-none-any.whl -qq\nprint('done')","metadata":{"papermill":{"duration":18.075198,"end_time":"2024-02-29T09:25:25.295954","exception":false,"start_time":"2024-02-29T09:25:07.220756","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-19T12:06:55.941575Z","iopub.execute_input":"2024-05-19T12:06:55.942215Z","iopub.status.idle":"2024-05-19T12:07:31.813004Z","shell.execute_reply.started":"2024-05-19T12:06:55.942181Z","shell.execute_reply":"2024-05-19T12:07:31.811918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"log_config_yaml = \"\"\"\nversion: 1\ndisable_existing_loggers: false\nformatters:\n  simple:\n    format: '%(levelname)s: %(message)s'\nhandlers:\n  stdout:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\nloggers:\n  root:\n    level: DEBUG\n    handlers:\n    - stdout\n\"\"\"\n\ntemperature = 0.85","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:07:41.631613Z","iopub.execute_input":"2024-05-19T12:07:41.631980Z","iopub.status.idle":"2024-05-19T12:07:41.637191Z","shell.execute_reply.started":"2024-05-19T12:07:41.631942Z","shell.execute_reply":"2024-05-19T12:07:41.636166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import gc\n\nimport re\nimport sys\nimport subprocess\nimport tempfile\nimport contextlib\nimport os\nimport functools","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:07:42.749041Z","iopub.execute_input":"2024-05-19T12:07:42.749352Z","iopub.status.idle":"2024-05-19T12:07:42.754172Z","shell.execute_reply.started":"2024-05-19T12:07:42.749329Z","shell.execute_reply":"2024-05-19T12:07:42.753172Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# import atexit\nimport yaml\nimport logging\nimport logging.config\nimport logging.handlers\n\n\nlogger = logging.getLogger(\"aimo\")\n\n\ndef setup_logging(config):\n    logging.config.dictConfig(config)\n#     queue_handler = logging.getHandlerByName(\"queue_handler\")\n#     if queue_handler is not None:\n#         queue_handler.listener.start()\n#         atexit.register(queue_handler.listener.stop)\n        \nsetup_logging(yaml.safe_load(log_config_yaml))\n\ndo_test = True\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:07:49.251397Z","iopub.execute_input":"2024-05-19T12:07:49.252091Z","iopub.status.idle":"2024-05-19T12:07:49.284985Z","shell.execute_reply.started":"2024-05-19T12:07:49.252059Z","shell.execute_reply":"2024-05-19T12:07:49.284054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nfrom transformers import (\n    AutoModelForCausalLM, \n    AutoTokenizer, \n    BitsAndBytesConfig, \n    AutoConfig,\n    set_seed,\n    pipeline as transformer_pipeline,\n    __version__ as transformers_version\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:07:50.991333Z","iopub.execute_input":"2024-05-19T12:07:50.991672Z","iopub.status.idle":"2024-05-19T12:08:11.096113Z","shell.execute_reply.started":"2024-05-19T12:07:50.991644Z","shell.execute_reply":"2024-05-19T12:08:11.095327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Transformers Version: {transformers_version}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:08:11.097577Z","iopub.execute_input":"2024-05-19T12:08:11.098126Z","iopub.status.idle":"2024-05-19T12:08:11.103153Z","shell.execute_reply.started":"2024-05-19T12:08:11.098100Z","shell.execute_reply":"2024-05-19T12:08:11.101959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"MODEL_PATH = \"/kaggle/input/deepseek-math\"\n\ntokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T11:30:55.300301Z","iopub.execute_input":"2024-05-19T11:30:55.300700Z","iopub.status.idle":"2024-05-19T11:30:55.612804Z","shell.execute_reply.started":"2024-05-19T11:30:55.300669Z","shell.execute_reply":"2024-05-19T11:30:55.611723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(tokenizer.chat_template)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T11:32:15.364356Z","iopub.execute_input":"2024-05-19T11:32:15.364739Z","iopub.status.idle":"2024-05-19T11:32:15.370316Z","shell.execute_reply.started":"2024-05-19T11:32:15.364710Z","shell.execute_reply":"2024-05-19T11:32:15.369063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"set_seed(42)\n\nMODEL_PATH = \"/kaggle/input/deepseek-math\"\n\nquantization_config = BitsAndBytesConfig(\n    load_in_4bit = True,\n    bnb_4bit_quant_type=\"nf4\",\n    bnb_4bit_compute_dtype=torch.bfloat16,\n    bnb_4bit_use_double_quant=True,\n)\n\nconfig = AutoConfig.from_pretrained(MODEL_PATH)\nconfig.gradient_checkpointing = True\n\n\ntokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)\n\nbase_LLM = AutoModelForCausalLM.from_pretrained(\n    MODEL_PATH,\n    device_map=\"auto\",\n    torch_dtype=\"auto\",\n    trust_remote_code=True,\n#     quantization_config=quantization_config,\n    config=config\n)\n\n","metadata":{"papermill":{"duration":664.688061,"end_time":"2024-02-29T09:36:29.988515","exception":false,"start_time":"2024-02-29T09:25:25.300454","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-19T12:08:22.169302Z","iopub.execute_input":"2024-05-19T12:08:22.169911Z","iopub.status.idle":"2024-05-19T12:10:46.381213Z","shell.execute_reply.started":"2024-05-19T12:08:22.169865Z","shell.execute_reply":"2024-05-19T12:10:46.380415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipeline = transformer_pipeline(\n    \"text-generation\",\n    model=base_LLM,\n    tokenizer=tokenizer,\n    torch_dtype='auto',\n    device_map=\"auto\",\n)\n\npipeline = functools.partial(\n    pipeline,\n    max_new_tokens=2048, \n    do_sample=True, \n    temperature=temperature,\n    return_full_text=False\n)\n\nclass ExtPipeline:\n    def __init__(self, pipeline, tokenizer, message_template):\n        self.pipeline = pipeline\n        self.tokenizer = tokenizer\n        self.msg_template = message_template\n    \n    \n    def prompt(self, question):\n        return self.tokenizer.apply_chat_template(\n            [\n                {\n                    'role': 'user',\n                    'content': self.msg_template.format(problem=question)\n                }\n            ],\n            tokenize = False\n        )\n        \n        \n    def __call__(self, question):\n        \n        prompt = self.prompt(question)\n        logger.info('prompt:\\n---\\n%s\\n---', prompt)\n        \n        result = self.pipeline(prompt)[0]['generated_text']\n        \n        torch.cuda.empty_cache()\n        gc.collect()\n\n        return result\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:16:42.412756Z","iopub.execute_input":"2024-05-19T12:16:42.413134Z","iopub.status.idle":"2024-05-19T12:16:42.422220Z","shell.execute_reply.started":"2024-05-19T12:16:42.413104Z","shell.execute_reply":"2024-05-19T12:16:42.421269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pipe = ExtPipeline(pipeline, tokenizer, deepseek_template)\nraw_output = pipe(random_equation_question()[0])","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:16:43.606820Z","iopub.execute_input":"2024-05-19T12:16:43.607177Z","iopub.status.idle":"2024-05-19T12:16:53.671804Z","shell.execute_reply.started":"2024-05-19T12:16:43.607151Z","shell.execute_reply":"2024-05-19T12:16:53.670846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#raw_output = pipe(random_arithmetic_question()[0])\nprint(raw_output)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:21:31.759990Z","iopub.execute_input":"2024-05-19T12:21:31.760862Z","iopub.status.idle":"2024-05-19T12:21:31.766006Z","shell.execute_reply.started":"2024-05-19T12:21:31.760818Z","shell.execute_reply":"2024-05-19T12:21:31.764977Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"code_chunk(raw_output), get_answer(raw_output)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:26:13.456841Z","iopub.execute_input":"2024-05-19T12:26:13.457698Z","iopub.status.idle":"2024-05-19T12:26:13.463476Z","shell.execute_reply.started":"2024-05-19T12:26:13.457666Z","shell.execute_reply":"2024-05-19T12:26:13.462534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"chunks = re.split(r\"(?=[\\n\\s]*?)```+?[a-zA-Z\\s]*?(?=\\n)\", raw_output)\nprint(chunks)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:29:36.495580Z","iopub.execute_input":"2024-05-19T12:29:36.496404Z","iopub.status.idle":"2024-05-19T12:29:36.501322Z","shell.execute_reply.started":"2024-05-19T12:29:36.496368Z","shell.execute_reply":"2024-05-19T12:29:36.500301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"base_LLM.dtype","metadata":{"execution":{"iopub.status.busy":"2024-05-19T11:12:17.749634Z","iopub.execute_input":"2024-05-19T11:12:17.749999Z","iopub.status.idle":"2024-05-19T11:12:17.756556Z","shell.execute_reply.started":"2024-05-19T11:12:17.749970Z","shell.execute_reply":"2024-05-19T11:12:17.755613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"device = 'cuda'","metadata":{"papermill":{"duration":0.022605,"end_time":"2024-02-29T09:36:31.265878","exception":false,"start_time":"2024-02-29T09:36:31.243273","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-19T11:12:23.161802Z","iopub.execute_input":"2024-05-19T11:12:23.162681Z","iopub.status.idle":"2024-05-19T11:12:23.166321Z","shell.execute_reply.started":"2024-05-19T11:12:23.162645Z","shell.execute_reply":"2024-05-19T11:12:23.165435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"torch.backends.cuda.enable_mem_efficient_sdp(False)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:12:02.767048Z","iopub.execute_input":"2024-05-19T12:12:02.767421Z","iopub.status.idle":"2024-05-19T12:12:02.771965Z","shell.execute_reply.started":"2024-05-19T12:12:02.767393Z","shell.execute_reply":"2024-05-19T12:12:02.771035Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"keras_team_template = \"\"\"Role:\nYou are an advanced AI system with exceptional mathematical reasoning and problem-solving capabilities, specifically designed to solve tricky math problems (whose answer is a non-negative integer) written in LaTeX format from the AI Mathematical Olympiad (AIMO) competition. Your task is to accurately analyze and solve intricate mathematical problems, demonstrating a deep understanding of mathematical concepts and a strong ability to apply logical reasoning strategies.\n\nInstruction:\n1. Carefully read and comprehend the problem statement provided in the \"Problem\" section.\n2. In the \"Solution\" section, provide a solution of the problem with detailed explanation of your logical reasoning process. Keep in mind that answer must be a non-negative integer number.\n3. At the end, create a \"Answer\" section where you will state only the final numerical or algebraic answer, without any additional text or narrative.\n\nProblem:\n{problem}\n\nSolution:\n{solution}\n\"\"\"\n\ndeepseek_template = \"\"\"Problem:\n{problem}\n\nInstructions:\nPlease integrate natural language reasoning with programs to solve the problem above, \nand put your final into an \"Answer\" section where you will state only the final numerical \nor algebraic answer, without any additional text or narrative.'\n\"\"\"\n\ndef colorize_text(text):\n    for word, color in zip([\"Role\", \"Instruction\", \"Problem\", \"Solution\", \"Answer\"],\n                           [\"blue\", \"orange\", \"red\", \"brown\", \"green\"]):\n        text = text.replace(f\"{word}:\", f\"\\n\\n**<font color='{color}'>{word}:</font>**\")\n    return text\n\ndef is_integer(text):\n    try:\n        if int(text) >= 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \n\n# Extract answer from model response\ndef get_answer(text):\n    try:\n        answer = re.search(r'Answer:\\s*([\\s\\S]+)', text).group(1).strip()\n        answer = answer.replace(\",\",\"\")\n        if is_integer(answer):\n            return int(answer)%1000\n        else:\n            return 0\n    except:\n        return 0\n    \n    \ndef infer(problem, model, template):\n    # Generate Prompt using template\n    prompt = template.format(\n            problem=problem,\n            solution=\"\"\n        )\n\n    # Infer\n    return model(prompt) ","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:11:23.271882Z","iopub.execute_input":"2024-05-19T12:11:23.272568Z","iopub.status.idle":"2024-05-19T12:11:23.282200Z","shell.execute_reply.started":"2024-05-19T12:11:23.272537Z","shell.execute_reply":"2024-05-19T12:11:23.281303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def code_chunk(text):\n    chunks = re.split(r\"(?=\\n)\\s*?```+?[a-zA-Z\\s]*?(?=\\n)\", text, re.M)\n    return chunks[1] if len(chunks)>0 else \"\"\n    \n\ndef boxed_answer(text):\n    answers = re.findall(r'\\\\boxed\\{(.*?)\\}', text)\n    return answers[-1] if answers else \"\"\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:25:51.776925Z","iopub.execute_input":"2024-05-19T12:25:51.777802Z","iopub.status.idle":"2024-05-19T12:25:51.783077Z","shell.execute_reply.started":"2024-05-19T12:25:51.777770Z","shell.execute_reply":"2024-05-19T12:25:51.781961Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if do_test:\n    import textwrap\n    example = \"\"\"\n    This is an example \n    ```python\n    print(\"haha\")\n    ```\n    ```shell\n    ls\n    ```\n    last line\n    $\\\\boxed{12}$\n    $\\\\boxed{10}$\n    \"\"\"\n    example = textwrap.dedent(example)\n    print(example)\n    print(code_chunk(example))\n    print(boxed_answer(example))","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:25:53.398970Z","iopub.execute_input":"2024-05-19T12:25:53.399667Z","iopub.status.idle":"2024-05-19T12:25:53.404814Z","shell.execute_reply.started":"2024-05-19T12:25:53.399636Z","shell.execute_reply":"2024-05-19T12:25:53.403918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"@contextlib.contextmanager\ndef new_tempfile():\n    try:\n        fd, fname = tempfile.mkstemp(suffix=\".py\")\n        os.close(fd)\n        logger.info('temp file: %s', fname)\n        yield fname\n    finally:\n        if os.path.exists(fname):\n            os.unlink(fname)\n            logger.info('temp file %s to be deleted', fname)\n\n            \ndef run_code_chunk(chunk, timeout=7):\n    with new_tempfile() as code_file: \n        with open(code_file, \"w\") as f:\n            f.write(chunk)\n\n        logger.info(\"running python3 on \\n```\\n%s\\n```\", chunk)\n\n        try:\n            result = subprocess.run(\n                [\"python3\", code_file], \n                timeout=timeout, \n                capture_output=True\n            )\n        except subprocess.TimeoutExpired:\n            logger.info(\"timeout occured\")\n            return -1\n\n        if result.returncode:\n            logger.info(\"error occured %s\", result.stderr.decode('utf8'))\n            return -1\n\n        stdout = result.stdout.decode('utf8')\n        logger.info(\"output: %s\", stdout)\n\n        try:\n            answer = int(stdout)\n        except ValueError:\n            answer = -1\n\n        return answer\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:20:26.997108Z","iopub.execute_input":"2024-05-19T12:20:26.997835Z","iopub.status.idle":"2024-05-19T12:20:27.007082Z","shell.execute_reply.started":"2024-05-19T12:20:26.997805Z","shell.execute_reply":"2024-05-19T12:20:27.006177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if do_test:\n    inf_loop = \"\"\"while True:\n        pass\n    \"\"\"\n    ! ls /tmp\n    result = run_code_chunk(inf_loop, 1)\n    print(result)\n    \n    result = run_code_chunk(code_chunk(example))\n    print(result)\n    \n    chunk = textwrap.dedent(\"\"\"\n    def f(a, b):\n        return a*b\n    \n    print(f(2, 12))\n    \"\"\")\n    result = run_code_chunk(chunk)\n    print(result)\n    ! ls /tmp\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-19T06:30:34.431988Z","iopub.execute_input":"2024-05-19T06:30:34.432392Z","iopub.status.idle":"2024-05-19T06:30:37.895356Z","shell.execute_reply.started":"2024-05-19T06:30:34.432351Z","shell.execute_reply":"2024-05-19T06:30:37.894159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# def process_output(output):\n#     result = output\n    \n#     try:\n#         code = output.split('```')[1][7:]\n\n#         with open('code.py', 'w') as fout:\n#             fout.write(code)\n\n#         batcmd = 'timeout 7 ' + sys.executable + ' code.py'\n#         try:\n#             shell_output = subprocess.check_output(batcmd, shell=True).decode('utf8')\n#             print(shell_output)\n#             code_output = round(float(eval(shell_output))) % 1000\n#         except:\n#             code_output = -1\n\n#         print('CODE RESULTS', code_output)\n    \n#     except Exception as e:\n#         print(e)\n#         print('ERROR PARSING')\n#         code_output = -1\n    \n#     try:\n#         result_output = re.findall(r'\\\\boxed\\{(.*)\\}', result)\n\n#         print('BOXED', result_output)\n#         if not len(result_output):\n#             result_output = naive_parse(result)\n#         else:\n#             result_output = result_output[-1]\n\n#         print('BOXED', result_output)\n#         if not len(result_output):\n#             result_output = -1\n        \n#         else:\n#             result_output = round(float(eval(result_output))) % 1000\n    \n#     except Exception as e:\n#         print(e)\n#         print('ERROR PARSING')\n#         result_output = -1\n    \n#     return result_output, code_output","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import re\nfrom collections import defaultdict\n\n\ntool_instruction = \" The answer should be given as a non-negative modulo 1000.\"\ntool_instruction += '\\nPlease integrate natural language reasoning with programs to solve the problem above, and put your final answer within \\\\boxed{}.'\n\n\nn_repetitions = 8 if PRIVATE else 2\ntemperature = 0.8964\n\ntotal_results = []\ntotal_answers = []\n\n\nfor i in tqdm(range(len(df))):\n    id_ = df['id'].loc[i]\n    problem = df['problem'].loc[i]\n\n    messages = [\n        {\n            \"role\": \"user\", \n            \"content\": problem + tool_instruction\n        }\n    ]\n    \n    query_prompt = tokenizer.apply_chat_template(\n        messages,\n        tokenize=False\n    )\n    \n    results = []\n    answers = []\n     \n    \n    for _ in tqdm(range(n_repetitions)):\n        try:\n            raw_output = pipeline(\n                query_prompt, \n                max_new_tokens=2048, \n                do_sample=True, \n                temperature=temperature,\n                return_full_text=False\n            )\n            raw_output = raw_output[0]['generated_text']\n\n            result_output, code_output = process_output(raw_output)\n\n            torch.cuda.empty_cache()\n            gc.collect()\n\n        except Exception as e:\n            print(e)\n            result_output, code_output = -1, -1\n        \n        results.append(result_output)\n        answers.append(code_output)\n    \n    total_results.append(results)\n    total_answers.append(answers)","metadata":{"papermill":{"duration":34.259365,"end_time":"2024-02-29T09:37:05.548829","exception":false,"start_time":"2024-02-29T09:36:31.289464","status":"completed"},"tags":[],"_kg_hide-output":true,"scrolled":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom collections import Counter\n\ndf['leng'] = df['problem'].astype(str).map(len)\ndf['orig_index'] = df.index.values\ndf = df.sort_values(by=['leng', 'id']).reset_index(drop=True)\ndf['enumerates'] = range(0, len(df))\ndf = df.sort_values('orig_index').reset_index(drop=True)\n\nenumerate_i = 0\nfinal_answers = []\nfor a, b in zip(total_answers, total_results):\n    a = np.array(a)\n    b = np.array(b)\n    a[a < 0] = b[a < 0]\n    pred = Counter(a.tolist()).most_common(2)\n    pred = pred + [(-1,0)]\n    val_previously, freq_previously = pred[0]\n    for val, freq in pred[1:]: \n        if freq == freq_previously:\n            val_previously = min(val_previously,val )\n    enumerates = df.enumerates.values[enumerate_i]\n    ans = val_previously if not val_previously < 0 else pred[1][0]\n    enumerate_i+= 1    \n    final_answers.append(ans)\n    print(ans)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import aimo\nenv = aimo.make_env()\nproblems = env.iter_test()\nsubmit_answer = env.predict","metadata":{"execution":{"iopub.status.busy":"2024-05-19T06:34:48.827589Z","iopub.execute_input":"2024-05-19T06:34:48.828721Z","iopub.status.idle":"2024-05-19T06:34:48.869285Z","shell.execute_reply.started":"2024-05-19T06:34:48.828672Z","shell.execute_reply":"2024-05-19T06:34:48.867385Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class ProblemSolver:\n    def __init__(\n        self, \n        pipeline, \n        repeat=1,             \n    ):\n        self.pipeline = pipeline\n        self.repeat = repeat\n           \n    def answer(self, question):\n        messages = [\n        {\n            \"role\": \"user\", \n            \"content\": \n        }\n    ]\n    \n    query_prompt = tokenizer.apply_chat_template(\n        messages,\n        tokenize=False\n    )\n    \n        answers = [self.solve(question) for _ in range(self.repeat)]\n        \n    \n    def solve(question):\n        \n        \nif 'solve_problem' not in dir():\n    def solve_problem(text):\n        \n        return 0","metadata":{"execution":{"iopub.status.busy":"2024-05-19T06:30:59.648515Z","iopub.execute_input":"2024-05-19T06:30:59.649303Z","iopub.status.idle":"2024-05-19T06:30:59.658726Z","shell.execute_reply.started":"2024-05-19T06:30:59.649264Z","shell.execute_reply":"2024-05-19T06:30:59.657057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nclass FakeEnv:\n    def __init__(self, questions):\n        self.questions = questions\n        self.answers = []\n        \n    def iter_test(self):\n        for i, (q, a) in enumerate(self.questions):\n            yield (\n                pd.DataFrame([{'id':i, 'problem': q}]).set_index('id'), \n                pd.DataFrame([{'id':i, 'answer':0, 'true answer': a}]).set_index('id')\n            )\n        \n        \n    def predict(self, submission):\n        self.answers.append(submission)\n        \n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T07:54:00.792876Z","iopub.execute_input":"2024-05-19T07:54:00.793325Z","iopub.status.idle":"2024-05-19T07:54:00.802809Z","shell.execute_reply.started":"2024-05-19T07:54:00.793295Z","shell.execute_reply":"2024-05-19T07:54:00.801357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fake_env = FakeEnv(\n    [random_arithmetic_question() for _ in range(5)]+\n    [random_equation_question() for _ in range(5)]\n)\nproblems, submit_answer = fake_env.iter_test(), fake_env.predict ","metadata":{"execution":{"iopub.status.busy":"2024-05-19T07:55:51.341280Z","iopub.execute_input":"2024-05-19T07:55:51.341748Z","iopub.status.idle":"2024-05-19T07:55:51.348917Z","shell.execute_reply.started":"2024-05-19T07:55:51.341714Z","shell.execute_reply":"2024-05-19T07:55:51.347403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nfor test, submission in problems:\n    logger.info(\"Q: %s\", test[\"problem\"].values[0])\n    answer= solve_problem(test['problem'])\n    submission['answer'] = answer\n    submit_answer(submission)\n    logger.info(\"submission:\\n---\\n%s\\n---\", submission)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T07:55:52.115995Z","iopub.execute_input":"2024-05-19T07:55:52.116387Z","iopub.status.idle":"2024-05-19T07:55:52.188239Z","shell.execute_reply.started":"2024-05-19T07:55:52.116359Z","shell.execute_reply":"2024-05-19T07:55:52.187214Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import random\n\ndef random_arithmetic_question():\n    while True:\n        op = random.choice(\"+-*\")\n        a, b = random.choices(range(1000), k=2)\n        expression = f\"{a}{op}{b}\"\n        result = eval(expression)\n        if result >= 0:\n            break\n    answer = result % 1000\n    if random.uniform(0, 2) > 1:\n        expression.replace(\"*\", \"\\\\times\")\n    return f\"What is ${expression}$?\", answer\n\n\ndef random_equation_question():\n    while True:\n        op = random.choice(\"+-*\")\n        a, x = random.choices(range(100), k=2)\n        expression = f\"{a}{op}{x}\"\n        b = eval(expression)\n        if b >= 0:\n            break\n    answer = x % 1000\n    var_name = random.choice(\"abcxyz\")\n    expression = f\"{a}{op}{var_name}={b}\"\n    if random.uniform(0, 2) > 1:\n        expression.replace(\"*\", \"\\\\times\")\n    return f\"Solve ${expression}$ for ${var_name}$.\", answer\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:11:04.982685Z","iopub.execute_input":"2024-05-19T12:11:04.983061Z","iopub.status.idle":"2024-05-19T12:11:04.991748Z","shell.execute_reply.started":"2024-05-19T12:11:04.983029Z","shell.execute_reply":"2024-05-19T12:11:04.990828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if do_test:\n    print(random_arithmetic_question())\n    print(random_equation_question())","metadata":{"execution":{"iopub.status.busy":"2024-05-19T07:48:44.016058Z","iopub.execute_input":"2024-05-19T07:48:44.016777Z","iopub.status.idle":"2024-05-19T07:48:44.023521Z","shell.execute_reply.started":"2024-05-19T07:48:44.016740Z","shell.execute_reply":"2024-05-19T07:48:44.022352Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}